{"name":"Ng-cells","tagline":"","body":"ng-cells\r\n========\r\n\r\nAngularJS Table directive\r\n\r\nThis directive draws a table of data with different features. It has no dependency other than angularjs. it has been\r\ntested on Google Chrome, Safari, Opera and Firefox and Internet Explorer 10 (8+ in developer mode)\r\n\r\nTu use this directive, just add the ngcTableDirective as dependency. The template is handle as an external HTML file\r\nand integrated during the build process in the `ngc-template` module. The template is registered in the angularjs template cache with the key `ngc.table.tpl.html`\r\n\r\n#Features\r\n\r\n* Automatic column and row references like in popular spreadsheets\r\n* Any number of fixed left and right columns\r\n* Any number of fixed header and footer rows\r\n* No table redraw : Supports big data sets without impacting display speed\r\n* Scrolls on full rows and columns\r\n* Data ranges with custom CSS class, format and styling functions and event callbacks\r\n* Table elements CSS classes for easy theming\r\n\r\n#Usage\r\n\r\n##Table\r\n\r\nThe directive displays a grid of cells organized as the following principles :\r\n\r\n    --------------------------------\r\n    | |      COLUMN LETTERS        |\r\n    --------------------------------\r\n    | |      | HEADER ROWS |       |\r\n    |-|------|---------------------|\r\n    |R|      |             |       |\r\n    |O| LEFT |   CENTER    | RIGHT |\r\n    |W| COLS |    COLS     | COLS  |\r\n    |#|      |             |       |\r\n    |-|------|-------------|-------|\r\n    | |      | FOOTER ROWS |       |\r\n    --------------------------------\r\n\r\nWhen the data matrix vertical dimension than the total number of rows, the area between header and footer is scrollable.\r\nThe behaviour is identical for the number of columns, the area between the left and right columns becomes scrollable.\r\n\r\nMinimal example to display a table with one million cells (1000 x 1000 data matrix) with default settings and no styling :\r\n\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html ng-app=\"ngcTableDirectiveTest\">\r\n<head>\r\n    <title>Test Template</title>\r\n    <link href=\"../dist/ng-cells-0.1.1.css\" rel=\"stylesheet\" type=\"text/css\">\r\n    <script src=\"../lib/angular-1.2.6.js\"></script>\r\n    <script src=\"../dist/ng-cells-0.1.1.js\"></script>\r\n    <script>\r\n        angular.module('ngcTableDirectiveTest', ['ngcTableDirective'])\r\n                .controller('TestCtrl', function($scope) {\r\n                    $scope.data = [];\r\n\r\n                    for (var row = 0; row < 1000; row++) {\r\n                        var rowContent = [];\r\n                        for (var col = 0; col < 1000; col++) {\r\n                            rowContent.push(row * col + col);\r\n                        }\r\n                        $scope.data.push(rowContent);\r\n                    }\r\n\r\n                });\r\n\r\n    </script>\r\n\r\n</head>\r\n<body>\r\n<div ng-controller=\"TestCtrl\">\r\n    <div ngc-table data=\"data\"></div>\r\n</div>\r\n</body>\r\n</html>\r\n```\r\n\r\nThe data must be given as a two dimensional array (ie `array[][]`). If your data is a complex object, you can define a custom data\r\nfunction to extract the data value. For example, the following html snippet will use the below javascript function to get the value\r\n\r\n```html\r\n<div ngc-table data=\"data\" custom-data-value-fn=\"customDataFn\"></div>\r\n```\r\n\r\n```js\r\n$scope.customDataFn = function(data, row, col) {\r\n    return data[1000 - row - 1][1000 - col - 1];\r\n}\r\n```\r\n\r\nThe table settings like number of columns and rows in each table part can be specified with different attributes which\r\nnames should be self-explanatory. Please see the reference below. For example:\r\n\r\n```html\r\n<ngc-table\r\n        data=\"data\"\r\n        left-column-number=\"5\" left-column-widths=\"'30px'\"\r\n        center-column-number=\"10\" center-column-widths=\"['40px', '60px', '40px']\"\r\n        right-column-number=\"5\" right-column-widths=\"['60px', '40px', '60px', '40px', '60px']\"\r\n        header-row-number=\"2\" header-row-heights=\"['30px', '15px']\"\r\n        row-number='15' row-heights=\"['41px', '14px']\"\r\n        footer-row-number=\"3\" footer-row-heights=\"'24px'\">\r\n</ngc-table>\r\n```\r\n\r\n\r\n##Cell Ranges\r\nRanges\r\n\r\nRanges let specify custom behaviour for data ranges. The range is defined by the area limits and holds custom\r\nCSS classes, format and styling functions and event callbacks. Ranges are specified in the data matrix range, thus they\r\nare not related to cells.\r\n\r\nTo add custom ranges, use the declarative ranges definitions such as this example :\r\n\r\n```html\r\n <ngc-table data=\"data\">\r\n     <ngc-range top=\"0\" bottom=\"1000\" left=\"0\" right=\"5\" format-fn=\"cellFormatRange1\"></ngc-range>\r\n     <ngc-range top=\"3\" bottom=\"8\" left=\"3\" right=\"998\" format-fn=\"cellFormatRange2\"></ngc-range>\r\n     <ngc-range top=\"10\" bottom=\"12\" left=\"6\" right=\"15\" format-fn=\"cellFormatRange3\"></ngc-range>\r\n     <ngc-range top=\"13\" bottom=\"30\" left=\"3\" right=\"998\" format-fn=\"cellFormatRange4\"></ngc-range>\r\n     <ngc-range top=\"990\" bottom=\"998\" left=\"3\" right=\"998\"></ngc-range>\r\n </ngc-table>\r\n```\r\n\r\nRanges can overlap but only one class, event function, format function etc is activated on a single cell. The order of\r\nprecedence is the same as the order of the range declarations. The callback receives the cell and the cellData.\r\n\r\nHere an example of `mousemove` event handling :\r\n\r\n```html\r\n<ngc-range top=\"0\" bottom=\"5\" left=\"0\" right=\"5\" click-fn=\"clickFn\"  ></ngc-range>\r\n```\r\n\r\n```js\r\n$scope.clickFn = function(event, cellData) {\r\n    console.log(event.target);\r\n    console.log(cellData.row);\r\n    console.log(cellData.col);\r\n    console.log(cellData.data);\r\n    console.log(cellData.value);\r\n}\r\n```\r\n\r\n\r\n##CSS Classes\r\n\r\nIn addition to ranges custom classes, the table embeds CSS classes to identify each part of the table. For example, to\r\nset the pen color and the background color of all cells of the right header part, use the following CSS statement in your stylesheet. If you have other elements that clash you can add an additional `ngc` class to make it more specific.\r\n\r\n```css\r\n.cell.right.header {\r\n    background-color: #880000;\r\n    color: whitesmoke;\r\n}\r\n```\r\n\r\n#Directive Reference\r\n\r\n##Table\r\n\r\n* `data` The 2D data matrix. The matrix can be of any dimension. By default, the displayed data is the data raw value\r\n* `custom-data-value-fn` A custom function to extract the data value from the data source. The provided function should\r\nhave the form `function(data, row, col)`. Please remember that the initial data matrix IS required in order to define the data dimensions.\r\n* `show-column-names` A flag to set the visibility of the column letters. By default `true`\r\n* `show-row-numbers` A flag to set the visibility of the row numbers. By default `true`\r\n* `show-header` A flag to set the visibility of the header part. By default `true`. If `false`, the value of `header-row-number` is ignored\r\n* `show-footer` A flag to set the visibility of the footer part. By default `true`. If `false`, the value of `footer-row-number` is ignored\r\n* `left-column-number` The number of fixed columns on the left part of the table. By default `1`\r\n* `left-column-widths` The CSS width of the left fixed columns, expressed with unit (eg `'40px'`).  No default. The value can be a single string value or an array of\r\nstring values. If the value is a single string, the same width is applied to all columns. If the value is an array, each column gets the width in arrays order (if the array's length is smaller than the number columns, the last width is used for the remaining columns).\r\n* `center-column-number` The number of columns on the center part of the table. By default `10`\r\n* `center-column-widths` The width of the center columns. See `left-column-widths` for value specification\r\n* `right-column-number` The number of fixed columns on the right part of the table. By default `1`\r\n* `right-column-widths` The width of the right fixed columns. See `left-column-widths` for value specification\r\n* `header-row-number` The number of rows in the header section of the table\r\n* `header-row-heights` The height of the header rows. See `left-column-widths` for value specification (except that the array values obviously relate to rows and not columns)\r\n* `row-number` The number of rows in the middle section of the table\r\n* `row-heights` The height of the middle rows. See `header-row-heights` for value specification\r\n* `footer-row-number` The number of rows in the footer section of the table\r\n* `footer-row-heights` The height of the footer rows. See `header-row-heights` for value specification\r\n\r\n\r\n##Range\r\n\r\n* `top` The top row (inclusive) limit of this range\r\n* `bottom` The bottom (non-inclusive) row limit of this range\r\n* `left` The left (inclusive) column limit of this range\r\n* `right` The right (non-inclusive) column limit of this range\r\n* `format-fn` A custom format function. This can be used to customize the output format of the data value. The function\r\nmust be of the form `function(value, row, col)` where `value` is the value of the source data at the position `[row][col]`\r\n* `clazz` Class(es) to add to the cells enclosed by the range\r\n* `style-fn` A custom style format function to be applied to the cells. Use it to apply sophisticated styling to the table. The function must be of the form `function(value, row, col)` where `value` is the value of the source data at the position `[row][col]`\r\n* `<event>-fn` Custom event callbacks. The event can be any of `click`, `dblclick`, `mousedown`, `mouseenter`, `mouseleave`\r\n`mousemove`, `mouseover`, `mouseup` event types. The callback must be of the form `function(event, cellData)` where\r\n`event` is the initial Javascript event and the `cellData` an object with the following attributes :\r\n** `row` The row of the data value in original data space (not table space)\r\n** `col` The column of the data value in original data space (not table space)\r\n** `data` The original data value located at row and column\r\n** `value` The value of the cell as displayed\r\n** `clazz` The classes of the cell\r\n** `style` The style declaration of the cell\r\n** `eventCallbacks` An object with all registered callbacks identified the event type\r\n** `enclosingRanges` An array of all ranges that enclose the current cell\r\n\r\n##CSS Reference\r\n\r\nHere's a list of the classes which can be used to select cells according to the table parts they belong to\r\n\r\n### Column names \r\n* row : `column-names row`\r\n* Row # column : `row-header column-name cell`\r\n* Left columns : `left column-name cell`\r\n* Center columns : `center column-name cell`\r\n* Right columns : `right column-name cell`\r\n\r\n### Header section \r\n* Rows : `header row`\r\n* Row # : `row-header header cell`\r\n* Left columns : `left header cell`\r\n* Center columns : `center header cell`\r\n* Right columns : `right header cell`\r\n\r\n### Middle section \r\n* Rows : `middle row`\r\n* Row # : `row-header middle cell`\r\n* Left columns : `left middle cell`\r\n* Center columns : `center middle cell`\r\n* Right columns : `right middle cell`\r\n\r\n### Footer section \r\n* Rows : `footer row`\r\n* Row # : `row-header footer cell`\r\n* Left columns : `left footer cell`\r\n* Center columns : `center footer cell`\r\n* Right columns : `right footer cell`\r\n\r\nAll element class declarations also have the `ngc` class. First and last rows of each section have the resp. `first` and\r\n`last` classes. Same for cells in each row and section.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}